/*
 * Competitor API
 * Web-facing API for the challenge
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.schwaben_devs.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.micronaut.core.annotation.NonNull;
import io.micronaut.serde.annotation.Serdeable;
import jakarta.annotation.Generated;


import java.util.Arrays;
import java.util.Objects;
import java.util.UUID;

/**
 * SearchResultOffer
 */
@Serdeable
@JsonPropertyOrder({
    SearchResultOffer.JSON_PROPERTY_I_D,
    SearchResultOffer.JSON_PROPERTY_DATA
})
@Generated("io.micronaut.openapi.generator.JavaMicronautServerCodegen")
public class SearchResultOffer {

    public static final String JSON_PROPERTY_I_D = "ID";
    public static final String JSON_PROPERTY_DATA = "data";

    /**
     * The unique identifier of the offer
     */
    @NonNull
    @JsonProperty(JSON_PROPERTY_I_D)
    private UUID ID;

    /**
     * Additional data of the offer, that is not used for filtering. For simplicity, this is just a base64 encoded 256 Byte array
     */
    @NonNull
    @JsonProperty(JSON_PROPERTY_DATA)
    private byte[] data;

    public SearchResultOffer(UUID ID, byte[] data) {
        this.ID = ID;
        this.data = data;
    }

    /**
     * The unique identifier of the offer
     *
     * @return the ID property value
     */
    public UUID getID() {
        return ID;
    }

    /**
     * Set the ID property value
     *
     * @param ID property value to set
     */
    public void setID(UUID ID) {
        this.ID = ID;
    }

    /**
     * Set ID in a chainable fashion.
     *
     * @return The same instance of SearchResultOffer for chaining.
     */
    public SearchResultOffer ID(UUID ID) {
        this.ID = ID;
        return this;
    }

    /**
     * Additional data of the offer, that is not used for filtering. For simplicity, this is just a base64 encoded 256 Byte array
     *
     * @return the data property value
     */
    public byte[] getData() {
        return data;
    }

    /**
     * Set the data property value
     *
     * @param data property value to set
     */
    public void setData(byte[] data) {
        this.data = data;
    }

    /**
     * Set data in a chainable fashion.
     *
     * @return The same instance of SearchResultOffer for chaining.
     */
    public SearchResultOffer data(byte[] data) {
        this.data = data;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchResultOffer searchResultOffer = (SearchResultOffer) o;
        return Objects.equals(ID, searchResultOffer.ID) &&
            Arrays.equals(data, searchResultOffer.data);
    }

    @Override
    public int hashCode() {
        return Objects.hash(ID, Arrays.hashCode(data));
    }

    @Override
    public String toString() {
        return "SearchResultOffer("
            + "ID: " + getID() + ", "
            + "data: " + getData()
            + ")";
    }

}